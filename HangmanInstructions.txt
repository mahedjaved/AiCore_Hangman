Meaningful Naming: Use descriptive names for methods and variables to enhance code readability. For example, create_list_of_website_links() over links() and use for element in web_element_list instead of for i in list
Eliminate Code Duplication: Identify repeated code blocks and refactor them into separate methods or functions. This promotes code reusability and reduces the likelihood of bugs
Single Responsibility Principle (SRP): Ensure that each method has a single responsibility, focusing on a specific task. If a method handles multiple concerns, split it into smaller, focused methods
Access Modifiers: Make methods private or protected if they are intended for internal use within the class and not externally accessible
Avoid Nested Loops: Minimize nested loops whenever possible to improve code efficiency and reduce complexity
Minimal Use of self: When writing methods in a class, only use self for variables that store information unique to each object created from the class. This helps keep the code organized and ensures that each object keeps its own special data separate from others
Consistent Docstrings: Provide clear and consistent docstrings for all methods, explaining their purpose, parameters, and return values. This aids code understanding for other developers




Milestone 5 : Putting it all together

--Task 1: Create a function that will run all the code to run the game as expected. You should begin by creating a new script called milestone_5.py. Copy all the codes in milestone_4.py file into the newly created milestone_5.py file.


Step 1:
Create a function called play_game that takes word_list as a parameter. Inside the function, write the code for the following steps

Create a variable called num_lives and assign it to 5
Create an instance of the Hangman class. Do this by calling the Hangman class and assign it to a variable called game
Pass word_list and num_lives as arguments to the game object
Create a while loop and set the condition to True. In the body of the loop, do the following:
Check if the num_lives is 0. If it is, that means the game has ended and the user lost. Print a message saying 'You lost!'
Next, check if the num_letters is greater than 0. In this case, you would want to continue the game, so you need to call the ask_for_input method.
If the num_lives is not 0 and the num_letters is not greater than 0, that means the user has won the game. Print a message saying 'Congratulations. You won the game!'
Step 2:
Outside the function, call your play_game function to play your game. Don't forget to pass in your list of words as argument to the function.


--Task 4 : Refactoring will be a continuous and constant process, but this is the time to really scrutinise your code.

You can use the following list to make improvements:

Meaningful Naming: Use descriptive names for methods and variables to enhance code readability. For example, create_list_of_website_links() over links() and use for element in web_element_list instead of for i in list
Eliminate Code Duplication: Identify repeated code blocks and refactor them into separate methods or functions. This promotes code reusability and reduces the likelihood of bugs
Single Responsibility Principle (SRP): Ensure that each method has a single responsibility, focusing on a specific task. If a method handles multiple concerns, split it into smaller, focused methods
Access Modifiers: Make methods private or protected if they are intended for internal use within the class and not externally accessible
Avoid Nested Loops: Minimize nested loops whenever possible to improve code efficiency and reduce complexity
Minimal Use of self: When writing methods in a class, only use self for variables that store information unique to each object created from the class. This helps keep the code organized and ensures that each object keeps its own special data separate from others
Consistent Docstrings: Provide clear and consistent docstrings for all methods, explaining their purpose, parameters, and return values. This aids code understanding for other developers